// Code generated by gin-swagger; DO NOT EDIT.

package infrastructure_accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/mikkeloscar/gin-swagger/api"
	"github.com/mikkeloscar/gin-swagger/tracing"
	opentracing "github.com/opentracing/opentracing-go"
	"github.com/opentracing/opentracing-go/ext"

	"github.com/go-openapi/errors"
)

// ListInfrastructureAccountsEndpoint executes the core logic of the related
// route endpoint.
func ListInfrastructureAccountsEndpoint(handler func(ctx *gin.Context) *api.Response) gin.HandlerFunc {
	return func(ctx *gin.Context) {
		span := opentracing.SpanFromContext(tracing.Context(ctx))

		// attach tags to opentracing span
		if span != nil {
			ext.HTTPMethod.Set(span, ctx.Request.Method)
			ext.HTTPUrl.Set(span, ctx.Request.URL.String())
		}

		resp := handler(ctx)

		// attach tags to opentracing span
		if span != nil {
			ext.HTTPStatusCode.Set(span, uint16(resp.Code))
		}

		switch resp.Code {
		case http.StatusNoContent:
			ctx.AbortWithStatus(resp.Code)
		default:
			ctx.JSON(resp.Code, resp.Body)
		}
	}
}

// NewListInfrastructureAccountsParams creates a new ListInfrastructureAccountsParams object
// with the default values initialized.
func NewListInfrastructureAccountsParams() *ListInfrastructureAccountsParams {
	var ()
	return &ListInfrastructureAccountsParams{}
}

// ListInfrastructureAccountsParams contains all the bound params for the list infrastructure accounts operation
// typically these are obtained from a http.Request
//
// swagger:parameters listInfrastructureAccounts
type ListInfrastructureAccountsParams struct {
}

// readRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *ListInfrastructureAccountsParams) readRequest(ctx *gin.Context) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// vim: ft=go
