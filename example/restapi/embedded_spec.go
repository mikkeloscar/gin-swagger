// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Registry to store information about infrastructure accounts and Kubernetes clusters.",
    "title": "Cluster Registry",
    "version": "0.0.1"
  },
  "basePath": "/",
  "paths": {
    "/infrastructure-accounts": {
      "get": {
        "tags": [
          "InfrastructureAccounts"
        ],
        "summary": "List all registered infrastructure accounts",
        "operationId": "listInfrastructureAccounts",
        "responses": {
          "200": {
            "description": "List of all infrastructure accounts.",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/InfrastructureAccount"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "uid"
            ]
          }
        ]
      },
      "post": {
        "description": "Creates a new infrastructure account\n",
        "tags": [
          "InfrastructureAccounts"
        ],
        "summary": "Create infrastructure account",
        "operationId": "createInfrastructureAccount",
        "parameters": [
          {
            "description": "Account that will be created.",
            "name": "infrastructure_account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InfrastructureAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Infrastructure account was scheduled for creation.",
            "schema": {
              "$ref": "#/definitions/InfrastructureAccount"
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict, already existing."
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "uid",
              "write"
            ]
          }
        ]
      }
    },
    "/infrastructure-accounts/{account_id}": {
      "get": {
        "description": "Read information regarding the infrastructure account.\n",
        "tags": [
          "InfrastructureAccounts"
        ],
        "summary": "Get single infrastructure account",
        "operationId": "getInfrastructureAccount",
        "parameters": [
          {
            "$ref": "#/parameters/account_id"
          }
        ],
        "responses": {
          "200": {
            "description": "Infrastructure account information.",
            "schema": {
              "$ref": "#/definitions/InfrastructureAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "InfrastructureAccount not found"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "update an infrastructure account.",
        "tags": [
          "InfrastructureAccounts"
        ],
        "summary": "Update infrastructure account",
        "operationId": "updateInfrastructureAccount",
        "parameters": [
          {
            "$ref": "#/parameters/account_id"
          },
          {
            "description": "Infrastructure Account that will be updated.",
            "name": "infrastructure_account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InfrastructureAccountUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The infrastructure account update request is accepted",
            "schema": {
              "$ref": "#/definitions/InfrastructureAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "InfrastructureAccount not found"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "uid",
              "write"
            ]
          }
        ]
      }
    },
    "/kubernetes-clusters": {
      "get": {
        "description": "Returns the list of all Kubernetes clusters.\n",
        "tags": [
          "Clusters"
        ],
        "summary": "List all Kubernetes clusters",
        "operationId": "listClusters",
        "parameters": [
          {
            "type": "string",
            "description": "Filter on cluster alias.",
            "name": "alias",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter on API server URL.",
            "name": "api_server_url",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter on channel.",
            "name": "channel",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Filter on criticality level.",
            "name": "criticality_level",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter on environment.",
            "name": "environment",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter on infrastructure account.",
            "name": "infrastructure_account",
            "in": "query"
          },
          {
            "enum": [
              "requested",
              "creating",
              "ready",
              "decommission-requested",
              "decommissioned"
            ],
            "type": "string",
            "description": "Filter on cluster lifecycle status.",
            "name": "lifecycle_status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter on local id.",
            "name": "local_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter on provider.",
            "name": "provider",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter on region.",
            "name": "region",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Include technical data (config items, node pools) in the response, true by default",
            "name": "verbose",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all Kubernetes clusters.",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Cluster"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Create a cluster.",
        "tags": [
          "Clusters"
        ],
        "summary": "Create cluster",
        "operationId": "createCluster",
        "parameters": [
          {
            "description": "Cluster that will be created.",
            "name": "cluster",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The cluster creation request is accepted",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict, already existing"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/kubernetes-clusters/{cluster_id}": {
      "get": {
        "description": "Read the details of the cluster.",
        "tags": [
          "Clusters"
        ],
        "summary": "Get single cluster",
        "operationId": "getCluster",
        "parameters": [
          {
            "$ref": "#/parameters/cluster_id"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Include technical data (config items, node pools) in the response, true by default",
            "name": "verbose",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster information.",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Cluster not found"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Cluster identified by the ID.\n",
        "tags": [
          "Clusters"
        ],
        "summary": "Delete cluster",
        "operationId": "deleteCluster",
        "parameters": [
          {
            "$ref": "#/parameters/cluster_id"
          }
        ],
        "responses": {
          "204": {
            "description": "Cluster deleted"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Cluster not found"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "update a cluster.",
        "tags": [
          "Clusters"
        ],
        "summary": "Update cluster",
        "operationId": "updateCluster",
        "parameters": [
          {
            "$ref": "#/parameters/cluster_id"
          },
          {
            "description": "Cluster that will be updated.",
            "name": "cluster",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClusterUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The cluster update request is performed and the updated cluster is returned.",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Cluster not found"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/kubernetes-clusters/{cluster_id}/config-items/{config_key}": {
      "put": {
        "description": "Add/update a configuration item unique to the cluster.",
        "tags": [
          "ConfigItems"
        ],
        "summary": "Add/update config item",
        "operationId": "addOrUpdateConfigItem",
        "parameters": [
          {
            "$ref": "#/parameters/cluster_id"
          },
          {
            "$ref": "#/parameters/config_key"
          },
          {
            "description": "Config value.",
            "name": "value",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigValue"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The config items add/update request is accepted.",
            "schema": {
              "$ref": "#/definitions/ConfigValue"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes config item.",
        "tags": [
          "ConfigItems"
        ],
        "summary": "Delete config item",
        "operationId": "deleteConfigItem",
        "parameters": [
          {
            "$ref": "#/parameters/cluster_id"
          },
          {
            "$ref": "#/parameters/config_key"
          }
        ],
        "responses": {
          "204": {
            "description": "Config item deleted."
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Config item not found"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/kubernetes-clusters/{cluster_id}/node-pools": {
      "get": {
        "description": "List all node pools of a cluster.",
        "tags": [
          "NodePools"
        ],
        "summary": "List node pools",
        "operationId": "listNodePools",
        "parameters": [
          {
            "$ref": "#/parameters/cluster_id"
          }
        ],
        "responses": {
          "200": {
            "description": "List of node pools",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/NodePool"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/kubernetes-clusters/{cluster_id}/node-pools/{node_pool_name}": {
      "put": {
        "description": "Create/update a node pool.",
        "tags": [
          "NodePools"
        ],
        "summary": "Create/update node pool",
        "operationId": "createOrUpdateNodePool",
        "parameters": [
          {
            "$ref": "#/parameters/cluster_id"
          },
          {
            "$ref": "#/parameters/node_pool_name"
          },
          {
            "description": "Node pool to be created.",
            "name": "node-pool",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NodePool"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The node pool create request is accepted.",
            "schema": {
              "$ref": "#/definitions/NodePool"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes node pool.",
        "tags": [
          "NodePools"
        ],
        "summary": "Delete node pool",
        "operationId": "deleteNodePool",
        "parameters": [
          {
            "$ref": "#/parameters/cluster_id"
          },
          {
            "$ref": "#/parameters/node_pool_name"
          }
        ],
        "responses": {
          "204": {
            "description": "Node pool deleted."
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Node pool not found"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Cluster": {
      "type": "object",
      "required": [
        "id",
        "alias",
        "infrastructure_account",
        "region",
        "local_id",
        "provider",
        "api_server_url",
        "channel",
        "environment",
        "criticality_level",
        "lifecycle_status"
      ],
      "properties": {
        "alias": {
          "description": "Human readable alias for the Kubernetes cluster. The alias is unique\nbut can be changed.\n",
          "type": "string",
          "pattern": "^[a-z][a-z0-9-]*[a-z0-9]$",
          "example": "production-cluster"
        },
        "api_server_url": {
          "description": "URL of the Kubernetes API server endpoint",
          "type": "string",
          "example": "https://kube-1.foo.example.org/"
        },
        "channel": {
          "description": "A version channel for the cluster.",
          "type": "string",
          "example": "alpha"
        },
        "config_items": {
          "description": "Configuration items unique to the cluster. E.g. custom API key used\nby one of the cluster services.\n",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "product_x_key": "abcde",
            "product_y_key": "12345"
          }
        },
        "criticality_level": {
          "description": "Level of criticality as defined by tech controlling. 1 is non critical, 2 is standard production, 3 is PCI.",
          "type": "integer",
          "format": "int32",
          "example": 2
        },
        "environment": {
          "description": "The environment in which the cluster run. This field is set at\ncreation time and cannot be modified.\n",
          "type": "string",
          "example": "production"
        },
        "id": {
          "description": "Globally unique ID of the Kubernetes cluster",
          "type": "string",
          "example": "aws:123456789012:eu-central-1:kube-1"
        },
        "infrastructure_account": {
          "description": "The identifier of the infrastructure account in which the cluster will live in",
          "type": "string",
          "example": "aws:123456789012"
        },
        "lifecycle_status": {
          "description": "Status of the cluster.",
          "type": "string",
          "enum": [
            "requested",
            "creating",
            "ready",
            "decommission-requested",
            "decommissioned"
          ],
          "example": "ready"
        },
        "local_id": {
          "description": "Cluster identifier which is local to the region",
          "type": "string",
          "example": "kube-1"
        },
        "node_pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodePool"
          }
        },
        "provider": {
          "description": "The provider of the cluster. Possible values are \"zalando-aws\", \"GKE\", ...",
          "type": "string",
          "example": "zalando-aws"
        },
        "region": {
          "description": "The region of the cluster",
          "type": "string",
          "example": "eu-central-1"
        },
        "status": {
          "$ref": "#/definitions/ClusterStatus"
        }
      }
    },
    "ClusterStatus": {
      "type": "object",
      "properties": {
        "current_version": {
          "description": "Current version of the cluster. This can refer to a commit hash or\nany valid version string in the context.\n",
          "type": "string",
          "example": "a1b2c3d4e5f6"
        },
        "last_version": {
          "description": "Last working version of the cluster. This can refer to a commit\nhash or any valid version string in the context. In case any\nproblems are defined for the current_version then it should be\nsafe to roll back to this last version.\n",
          "type": "string",
          "example": "a2b3c4d5e6f7"
        },
        "next_version": {
          "description": "Next version of the cluster. This field indicates that the cluster is\nbeing updated to a new version. This can refer to a commit hash or any\nvalid version string in the context.\n",
          "type": "string",
          "example": "a3b4c5d6e7f8"
        },
        "problems": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "type",
              "title"
            ],
            "properties": {
              "detail": {
                "description": "A human-readable explanation specific to this occurrence of\nthe problem.\n",
                "type": "string",
                "example": "Cluster lifecycle manager was unable to apply the\nkubernetes-dashboard service because of insufficient\npermissions.\n"
              },
              "instance": {
                "description": "A URI reference that identifies the specific occurrence of\nthe problem.\n",
                "type": "string",
                "example": "service/kubernetes-dashboard"
              },
              "status": {
                "description": "The HTTP status code generated by the origin server for this\noccurence of the problem.\n",
                "type": "integer",
                "format": "int32",
                "example": 401
              },
              "title": {
                "description": "A short, human-readable summary of the problem type.\n",
                "type": "string",
                "example": "Failed to apply service 'kubernetes-dashboard'"
              },
              "type": {
                "description": "A URI reference the indentifies the problem type.",
                "type": "string",
                "example": "https://cluster-status.example.org/service-apply-failed"
              }
            },
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      }
    },
    "ClusterUpdate": {
      "type": "object",
      "properties": {
        "alias": {
          "description": "Human readable alias for the Kubernetes cluster. The alias is unique\nbut can be changed.\n",
          "type": "string",
          "example": "production-cluster"
        },
        "api_server_url": {
          "description": "URL of the Kubernetes API server endpoint",
          "type": "string",
          "example": "https://kube-1.foo.example.org/"
        },
        "channel": {
          "description": "A version channel for the cluster. Possible values are \"alpha\", \"stable\"",
          "type": "string",
          "example": "alpha"
        },
        "config_items": {
          "description": "Configuration items unique to the cluster. E.g. custom API key used\nby one of the cluster services.\n",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "product_x_key": "abcde",
            "product_y_key": "12345"
          }
        },
        "lifecycle_status": {
          "description": "Status of the cluster.",
          "type": "string",
          "enum": [
            "requested",
            "creating",
            "ready",
            "decommission-requested",
            "decommissioned"
          ],
          "example": "ready"
        },
        "provider": {
          "description": "The provider of the cluster. Possible values are \"zalando-aws\", \"GKE\", ...",
          "type": "string",
          "example": "zalando-aws"
        },
        "status": {
          "$ref": "#/definitions/ClusterStatus"
        }
      }
    },
    "ConfigValue": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "description": "Value of the Config value.",
          "type": "string",
          "example": "secret-key-id"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "fields": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "InfrastructureAccount": {
      "type": "object",
      "required": [
        "id",
        "type",
        "name",
        "owner",
        "environment",
        "criticality_level",
        "external_id",
        "lifecycle_status"
      ],
      "properties": {
        "criticality_level": {
          "description": "Level of criticality as defined by tech controlling. 1 is non critical, 2 is standard production, 3 is PCI",
          "type": "integer",
          "format": "int32",
          "example": 2
        },
        "environment": {
          "description": "Environment. possible values are \"production\" or \"staging\". This field is set at creation time and cannot be modified.",
          "type": "string",
          "example": "production"
        },
        "external_id": {
          "description": "The external identifier of the account (i.e. AWS account ID)",
          "type": "string",
          "example": "123456789012"
        },
        "id": {
          "description": "Globally unique ID of the infrastructure account.",
          "type": "string",
          "example": "aws:123456789012"
        },
        "lifecycle_status": {
          "description": "Lifecycle Status is used to describe the current status of the account.",
          "type": "string",
          "enum": [
            "requested",
            "creating",
            "ready",
            "decommissioned"
          ]
        },
        "name": {
          "description": "Name of the infrastructure account",
          "type": "string",
          "example": "foo"
        },
        "owner": {
          "description": "Owner of the infrastructure account (references an object in the organization service)",
          "type": "string",
          "example": "team/bar"
        },
        "type": {
          "description": "Type of the infrastructure account. Possible types are \"aws\", \"gcp\", \"dc\". This field is set at creation time and cannot be modified.",
          "type": "string",
          "example": "aws"
        }
      }
    },
    "InfrastructureAccountUpdate": {
      "type": "object",
      "properties": {
        "lifecycle_status": {
          "description": "Lifecycle Status is used to describe the current status of the account.",
          "type": "string",
          "enum": [
            "requested",
            "creating",
            "ready",
            "decommissioned"
          ]
        },
        "name": {
          "description": "Name of the infrastructure account",
          "type": "string",
          "example": "foo"
        },
        "owner": {
          "description": "Owner of the infrastructure account (references an object in the organization service)",
          "type": "string",
          "example": "team/bar"
        }
      }
    },
    "NodePool": {
      "type": "object",
      "required": [
        "name",
        "profile",
        "instance_type",
        "discount_strategy"
      ],
      "properties": {
        "discount_strategy": {
          "description": "A discount strategy indicates the type of discount to be associated with the node pool. This might affect the availability of the nodes in the pools in case of preemptible or spot instances.\nPossible values are \"none\", \"aggressive\", \"moderate\", \"reasonable\" #TODO naming should be \"reasonable\" :-D\n",
          "type": "string",
          "example": "none"
        },
        "instance_type": {
          "description": "Type of the instance to use for the nodes in the pool. All the nodes in the pool share the same instance types",
          "type": "string",
          "example": "m4.medium"
        },
        "name": {
          "description": "Name of the node pool",
          "type": "string",
          "example": "pool-1"
        },
        "profile": {
          "description": "Profile used for the node pool. Possible values are \"worker/default\", \"worker/database\", \"worker/gpu\", \"master\". The \"master\" profile identifies the pool containing the cluster master",
          "type": "string",
          "example": "worker/default"
        }
      }
    }
  },
  "parameters": {
    "account_id": {
      "pattern": "^[a-z][a-z0-9-:]*[a-z0-9]$",
      "type": "string",
      "description": "ID of the infrastructure account.",
      "name": "account_id",
      "in": "path",
      "required": true
    },
    "cluster_id": {
      "pattern": "^[a-z][a-z0-9-:]*[a-z0-9]$",
      "type": "string",
      "description": "ID of the cluster.",
      "name": "cluster_id",
      "in": "path",
      "required": true
    },
    "config_key": {
      "pattern": "^[a-z][a-z0-9_]*[a-z0-9]$",
      "type": "string",
      "description": "Key for the config value.",
      "name": "config_key",
      "in": "path",
      "required": true
    },
    "node_pool_name": {
      "pattern": "^[a-z][a-z0-9-]*[a-z0-9]$",
      "type": "string",
      "description": "Name of the node pool.",
      "name": "node_pool_name",
      "in": "path",
      "required": true
    }
  },
  "securityDefinitions": {
    "OAuth2": {
      "type": "oauth2",
      "flow": "password",
      "tokenUrl": "https://info.services.auth.zalando.com/oauth2/tokeninfo",
      "scopes": {
        "uid": "Unique identifier of the user accessing the service.",
        "write": "Allows write"
      }
    }
  },
  "security": [
    {
      "OAuth2": [
        "uid"
      ]
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Registry to store information about infrastructure accounts and Kubernetes clusters.",
    "title": "Cluster Registry",
    "version": "0.0.1"
  },
  "basePath": "/",
  "paths": {
    "/infrastructure-accounts": {
      "get": {
        "tags": [
          "InfrastructureAccounts"
        ],
        "summary": "List all registered infrastructure accounts",
        "operationId": "listInfrastructureAccounts",
        "responses": {
          "200": {
            "description": "List of all infrastructure accounts.",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/InfrastructureAccount"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "uid"
            ]
          }
        ]
      },
      "post": {
        "description": "Creates a new infrastructure account\n",
        "tags": [
          "InfrastructureAccounts"
        ],
        "summary": "Create infrastructure account",
        "operationId": "createInfrastructureAccount",
        "parameters": [
          {
            "description": "Account that will be created.",
            "name": "infrastructure_account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InfrastructureAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Infrastructure account was scheduled for creation.",
            "schema": {
              "$ref": "#/definitions/InfrastructureAccount"
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict, already existing."
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "uid",
              "write"
            ]
          }
        ]
      }
    },
    "/infrastructure-accounts/{account_id}": {
      "get": {
        "description": "Read information regarding the infrastructure account.\n",
        "tags": [
          "InfrastructureAccounts"
        ],
        "summary": "Get single infrastructure account",
        "operationId": "getInfrastructureAccount",
        "parameters": [
          {
            "pattern": "^[a-z][a-z0-9-:]*[a-z0-9]$",
            "type": "string",
            "description": "ID of the infrastructure account.",
            "name": "account_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Infrastructure account information.",
            "schema": {
              "$ref": "#/definitions/InfrastructureAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "InfrastructureAccount not found"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "update an infrastructure account.",
        "tags": [
          "InfrastructureAccounts"
        ],
        "summary": "Update infrastructure account",
        "operationId": "updateInfrastructureAccount",
        "parameters": [
          {
            "pattern": "^[a-z][a-z0-9-:]*[a-z0-9]$",
            "type": "string",
            "description": "ID of the infrastructure account.",
            "name": "account_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Infrastructure Account that will be updated.",
            "name": "infrastructure_account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InfrastructureAccountUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The infrastructure account update request is accepted",
            "schema": {
              "$ref": "#/definitions/InfrastructureAccount"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "InfrastructureAccount not found"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "OAuth2": [
              "uid",
              "write"
            ]
          }
        ]
      }
    },
    "/kubernetes-clusters": {
      "get": {
        "description": "Returns the list of all Kubernetes clusters.\n",
        "tags": [
          "Clusters"
        ],
        "summary": "List all Kubernetes clusters",
        "operationId": "listClusters",
        "parameters": [
          {
            "type": "string",
            "description": "Filter on cluster alias.",
            "name": "alias",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter on API server URL.",
            "name": "api_server_url",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter on channel.",
            "name": "channel",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Filter on criticality level.",
            "name": "criticality_level",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter on environment.",
            "name": "environment",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter on infrastructure account.",
            "name": "infrastructure_account",
            "in": "query"
          },
          {
            "enum": [
              "requested",
              "creating",
              "ready",
              "decommission-requested",
              "decommissioned"
            ],
            "type": "string",
            "description": "Filter on cluster lifecycle status.",
            "name": "lifecycle_status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter on local id.",
            "name": "local_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter on provider.",
            "name": "provider",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter on region.",
            "name": "region",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Include technical data (config items, node pools) in the response, true by default",
            "name": "verbose",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all Kubernetes clusters.",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Cluster"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Create a cluster.",
        "tags": [
          "Clusters"
        ],
        "summary": "Create cluster",
        "operationId": "createCluster",
        "parameters": [
          {
            "description": "Cluster that will be created.",
            "name": "cluster",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The cluster creation request is accepted",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict, already existing"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/kubernetes-clusters/{cluster_id}": {
      "get": {
        "description": "Read the details of the cluster.",
        "tags": [
          "Clusters"
        ],
        "summary": "Get single cluster",
        "operationId": "getCluster",
        "parameters": [
          {
            "pattern": "^[a-z][a-z0-9-:]*[a-z0-9]$",
            "type": "string",
            "description": "ID of the cluster.",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Include technical data (config items, node pools) in the response, true by default",
            "name": "verbose",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Cluster information.",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Cluster not found"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Cluster identified by the ID.\n",
        "tags": [
          "Clusters"
        ],
        "summary": "Delete cluster",
        "operationId": "deleteCluster",
        "parameters": [
          {
            "pattern": "^[a-z][a-z0-9-:]*[a-z0-9]$",
            "type": "string",
            "description": "ID of the cluster.",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Cluster deleted"
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Cluster not found"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "description": "update a cluster.",
        "tags": [
          "Clusters"
        ],
        "summary": "Update cluster",
        "operationId": "updateCluster",
        "parameters": [
          {
            "pattern": "^[a-z][a-z0-9-:]*[a-z0-9]$",
            "type": "string",
            "description": "ID of the cluster.",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Cluster that will be updated.",
            "name": "cluster",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClusterUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The cluster update request is performed and the updated cluster is returned.",
            "schema": {
              "$ref": "#/definitions/Cluster"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Cluster not found"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/kubernetes-clusters/{cluster_id}/config-items/{config_key}": {
      "put": {
        "description": "Add/update a configuration item unique to the cluster.",
        "tags": [
          "ConfigItems"
        ],
        "summary": "Add/update config item",
        "operationId": "addOrUpdateConfigItem",
        "parameters": [
          {
            "pattern": "^[a-z][a-z0-9-:]*[a-z0-9]$",
            "type": "string",
            "description": "ID of the cluster.",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^[a-z][a-z0-9_]*[a-z0-9]$",
            "type": "string",
            "description": "Key for the config value.",
            "name": "config_key",
            "in": "path",
            "required": true
          },
          {
            "description": "Config value.",
            "name": "value",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigValue"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The config items add/update request is accepted.",
            "schema": {
              "$ref": "#/definitions/ConfigValue"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes config item.",
        "tags": [
          "ConfigItems"
        ],
        "summary": "Delete config item",
        "operationId": "deleteConfigItem",
        "parameters": [
          {
            "pattern": "^[a-z][a-z0-9-:]*[a-z0-9]$",
            "type": "string",
            "description": "ID of the cluster.",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^[a-z][a-z0-9_]*[a-z0-9]$",
            "type": "string",
            "description": "Key for the config value.",
            "name": "config_key",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Config item deleted."
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Config item not found"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/kubernetes-clusters/{cluster_id}/node-pools": {
      "get": {
        "description": "List all node pools of a cluster.",
        "tags": [
          "NodePools"
        ],
        "summary": "List node pools",
        "operationId": "listNodePools",
        "parameters": [
          {
            "pattern": "^[a-z][a-z0-9-:]*[a-z0-9]$",
            "type": "string",
            "description": "ID of the cluster.",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of node pools",
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/NodePool"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/kubernetes-clusters/{cluster_id}/node-pools/{node_pool_name}": {
      "put": {
        "description": "Create/update a node pool.",
        "tags": [
          "NodePools"
        ],
        "summary": "Create/update node pool",
        "operationId": "createOrUpdateNodePool",
        "parameters": [
          {
            "pattern": "^[a-z][a-z0-9-:]*[a-z0-9]$",
            "type": "string",
            "description": "ID of the cluster.",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^[a-z][a-z0-9-]*[a-z0-9]$",
            "type": "string",
            "description": "Name of the node pool.",
            "name": "node_pool_name",
            "in": "path",
            "required": true
          },
          {
            "description": "Node pool to be created.",
            "name": "node-pool",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NodePool"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The node pool create request is accepted.",
            "schema": {
              "$ref": "#/definitions/NodePool"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes node pool.",
        "tags": [
          "NodePools"
        ],
        "summary": "Delete node pool",
        "operationId": "deleteNodePool",
        "parameters": [
          {
            "pattern": "^[a-z][a-z0-9-:]*[a-z0-9]$",
            "type": "string",
            "description": "ID of the cluster.",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^[a-z][a-z0-9-]*[a-z0-9]$",
            "type": "string",
            "description": "Name of the node pool.",
            "name": "node_pool_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Node pool deleted."
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Node pool not found"
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Cluster": {
      "type": "object",
      "required": [
        "id",
        "alias",
        "infrastructure_account",
        "region",
        "local_id",
        "provider",
        "api_server_url",
        "channel",
        "environment",
        "criticality_level",
        "lifecycle_status"
      ],
      "properties": {
        "alias": {
          "description": "Human readable alias for the Kubernetes cluster. The alias is unique\nbut can be changed.\n",
          "type": "string",
          "pattern": "^[a-z][a-z0-9-]*[a-z0-9]$",
          "example": "production-cluster"
        },
        "api_server_url": {
          "description": "URL of the Kubernetes API server endpoint",
          "type": "string",
          "example": "https://kube-1.foo.example.org/"
        },
        "channel": {
          "description": "A version channel for the cluster.",
          "type": "string",
          "example": "alpha"
        },
        "config_items": {
          "description": "Configuration items unique to the cluster. E.g. custom API key used\nby one of the cluster services.\n",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "product_x_key": "abcde",
            "product_y_key": "12345"
          }
        },
        "criticality_level": {
          "description": "Level of criticality as defined by tech controlling. 1 is non critical, 2 is standard production, 3 is PCI.",
          "type": "integer",
          "format": "int32",
          "example": 2
        },
        "environment": {
          "description": "The environment in which the cluster run. This field is set at\ncreation time and cannot be modified.\n",
          "type": "string",
          "example": "production"
        },
        "id": {
          "description": "Globally unique ID of the Kubernetes cluster",
          "type": "string",
          "example": "aws:123456789012:eu-central-1:kube-1"
        },
        "infrastructure_account": {
          "description": "The identifier of the infrastructure account in which the cluster will live in",
          "type": "string",
          "example": "aws:123456789012"
        },
        "lifecycle_status": {
          "description": "Status of the cluster.",
          "type": "string",
          "enum": [
            "requested",
            "creating",
            "ready",
            "decommission-requested",
            "decommissioned"
          ],
          "example": "ready"
        },
        "local_id": {
          "description": "Cluster identifier which is local to the region",
          "type": "string",
          "example": "kube-1"
        },
        "node_pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodePool"
          }
        },
        "provider": {
          "description": "The provider of the cluster. Possible values are \"zalando-aws\", \"GKE\", ...",
          "type": "string",
          "example": "zalando-aws"
        },
        "region": {
          "description": "The region of the cluster",
          "type": "string",
          "example": "eu-central-1"
        },
        "status": {
          "$ref": "#/definitions/ClusterStatus"
        }
      }
    },
    "ClusterStatus": {
      "type": "object",
      "properties": {
        "current_version": {
          "description": "Current version of the cluster. This can refer to a commit hash or\nany valid version string in the context.\n",
          "type": "string",
          "example": "a1b2c3d4e5f6"
        },
        "last_version": {
          "description": "Last working version of the cluster. This can refer to a commit\nhash or any valid version string in the context. In case any\nproblems are defined for the current_version then it should be\nsafe to roll back to this last version.\n",
          "type": "string",
          "example": "a2b3c4d5e6f7"
        },
        "next_version": {
          "description": "Next version of the cluster. This field indicates that the cluster is\nbeing updated to a new version. This can refer to a commit hash or any\nvalid version string in the context.\n",
          "type": "string",
          "example": "a3b4c5d6e7f8"
        },
        "problems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterStatusProblemsItems0"
          }
        }
      }
    },
    "ClusterStatusProblemsItems0": {
      "type": "object",
      "required": [
        "type",
        "title"
      ],
      "properties": {
        "detail": {
          "description": "A human-readable explanation specific to this occurrence of\nthe problem.\n",
          "type": "string",
          "example": "Cluster lifecycle manager was unable to apply the\nkubernetes-dashboard service because of insufficient\npermissions.\n"
        },
        "instance": {
          "description": "A URI reference that identifies the specific occurrence of\nthe problem.\n",
          "type": "string",
          "example": "service/kubernetes-dashboard"
        },
        "status": {
          "description": "The HTTP status code generated by the origin server for this\noccurence of the problem.\n",
          "type": "integer",
          "format": "int32",
          "example": 401
        },
        "title": {
          "description": "A short, human-readable summary of the problem type.\n",
          "type": "string",
          "example": "Failed to apply service 'kubernetes-dashboard'"
        },
        "type": {
          "description": "A URI reference the indentifies the problem type.",
          "type": "string",
          "example": "https://cluster-status.example.org/service-apply-failed"
        }
      },
      "additionalProperties": {
        "type": "string"
      }
    },
    "ClusterUpdate": {
      "type": "object",
      "properties": {
        "alias": {
          "description": "Human readable alias for the Kubernetes cluster. The alias is unique\nbut can be changed.\n",
          "type": "string",
          "example": "production-cluster"
        },
        "api_server_url": {
          "description": "URL of the Kubernetes API server endpoint",
          "type": "string",
          "example": "https://kube-1.foo.example.org/"
        },
        "channel": {
          "description": "A version channel for the cluster. Possible values are \"alpha\", \"stable\"",
          "type": "string",
          "example": "alpha"
        },
        "config_items": {
          "description": "Configuration items unique to the cluster. E.g. custom API key used\nby one of the cluster services.\n",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "example": {
            "product_x_key": "abcde",
            "product_y_key": "12345"
          }
        },
        "lifecycle_status": {
          "description": "Status of the cluster.",
          "type": "string",
          "enum": [
            "requested",
            "creating",
            "ready",
            "decommission-requested",
            "decommissioned"
          ],
          "example": "ready"
        },
        "provider": {
          "description": "The provider of the cluster. Possible values are \"zalando-aws\", \"GKE\", ...",
          "type": "string",
          "example": "zalando-aws"
        },
        "status": {
          "$ref": "#/definitions/ClusterStatus"
        }
      }
    },
    "ConfigValue": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "description": "Value of the Config value.",
          "type": "string",
          "example": "secret-key-id"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "fields": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "InfrastructureAccount": {
      "type": "object",
      "required": [
        "id",
        "type",
        "name",
        "owner",
        "environment",
        "criticality_level",
        "external_id",
        "lifecycle_status"
      ],
      "properties": {
        "criticality_level": {
          "description": "Level of criticality as defined by tech controlling. 1 is non critical, 2 is standard production, 3 is PCI",
          "type": "integer",
          "format": "int32",
          "example": 2
        },
        "environment": {
          "description": "Environment. possible values are \"production\" or \"staging\". This field is set at creation time and cannot be modified.",
          "type": "string",
          "example": "production"
        },
        "external_id": {
          "description": "The external identifier of the account (i.e. AWS account ID)",
          "type": "string",
          "example": "123456789012"
        },
        "id": {
          "description": "Globally unique ID of the infrastructure account.",
          "type": "string",
          "example": "aws:123456789012"
        },
        "lifecycle_status": {
          "description": "Lifecycle Status is used to describe the current status of the account.",
          "type": "string",
          "enum": [
            "requested",
            "creating",
            "ready",
            "decommissioned"
          ]
        },
        "name": {
          "description": "Name of the infrastructure account",
          "type": "string",
          "example": "foo"
        },
        "owner": {
          "description": "Owner of the infrastructure account (references an object in the organization service)",
          "type": "string",
          "example": "team/bar"
        },
        "type": {
          "description": "Type of the infrastructure account. Possible types are \"aws\", \"gcp\", \"dc\". This field is set at creation time and cannot be modified.",
          "type": "string",
          "example": "aws"
        }
      }
    },
    "InfrastructureAccountUpdate": {
      "type": "object",
      "properties": {
        "lifecycle_status": {
          "description": "Lifecycle Status is used to describe the current status of the account.",
          "type": "string",
          "enum": [
            "requested",
            "creating",
            "ready",
            "decommissioned"
          ]
        },
        "name": {
          "description": "Name of the infrastructure account",
          "type": "string",
          "example": "foo"
        },
        "owner": {
          "description": "Owner of the infrastructure account (references an object in the organization service)",
          "type": "string",
          "example": "team/bar"
        }
      }
    },
    "NodePool": {
      "type": "object",
      "required": [
        "name",
        "profile",
        "instance_type",
        "discount_strategy"
      ],
      "properties": {
        "discount_strategy": {
          "description": "A discount strategy indicates the type of discount to be associated with the node pool. This might affect the availability of the nodes in the pools in case of preemptible or spot instances.\nPossible values are \"none\", \"aggressive\", \"moderate\", \"reasonable\" #TODO naming should be \"reasonable\" :-D\n",
          "type": "string",
          "example": "none"
        },
        "instance_type": {
          "description": "Type of the instance to use for the nodes in the pool. All the nodes in the pool share the same instance types",
          "type": "string",
          "example": "m4.medium"
        },
        "name": {
          "description": "Name of the node pool",
          "type": "string",
          "example": "pool-1"
        },
        "profile": {
          "description": "Profile used for the node pool. Possible values are \"worker/default\", \"worker/database\", \"worker/gpu\", \"master\". The \"master\" profile identifies the pool containing the cluster master",
          "type": "string",
          "example": "worker/default"
        }
      }
    }
  },
  "parameters": {
    "account_id": {
      "pattern": "^[a-z][a-z0-9-:]*[a-z0-9]$",
      "type": "string",
      "description": "ID of the infrastructure account.",
      "name": "account_id",
      "in": "path",
      "required": true
    },
    "cluster_id": {
      "pattern": "^[a-z][a-z0-9-:]*[a-z0-9]$",
      "type": "string",
      "description": "ID of the cluster.",
      "name": "cluster_id",
      "in": "path",
      "required": true
    },
    "config_key": {
      "pattern": "^[a-z][a-z0-9_]*[a-z0-9]$",
      "type": "string",
      "description": "Key for the config value.",
      "name": "config_key",
      "in": "path",
      "required": true
    },
    "node_pool_name": {
      "pattern": "^[a-z][a-z0-9-]*[a-z0-9]$",
      "type": "string",
      "description": "Name of the node pool.",
      "name": "node_pool_name",
      "in": "path",
      "required": true
    }
  },
  "securityDefinitions": {
    "OAuth2": {
      "type": "oauth2",
      "flow": "password",
      "tokenUrl": "https://info.services.auth.zalando.com/oauth2/tokeninfo",
      "scopes": {
        "uid": "Unique identifier of the user accessing the service.",
        "write": "Allows write"
      }
    }
  },
  "security": [
    {
      "OAuth2": [
        "uid"
      ]
    }
  ]
}`))
}
